﻿
// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
// To make custom modifications, edit the .proto file and add //:external before the message line
// then write the code and the changes in a separate file.

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;

using SilentOrbit.ProtocolBuffers;
using static SilentOrbit.ProtocolBuffers.ProtocolParser;

// This is the backend code for reading and writing
namespace Google.Protobuf;

public partial class SourceCodeInfo
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static SourceCodeInfo Deserialize(Stream stream)
    {
        var instance = new SourceCodeInfo();
        Deserialize(stream, instance);
        return instance;
    }

    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static SourceCodeInfo DeserializeLengthDelimited(Stream stream)
    {
        var instance = new SourceCodeInfo();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }

    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static SourceCodeInfo DeserializeLength(Stream stream, int length)
    {
        var instance = new SourceCodeInfo();
        DeserializeLength(stream, length, instance);
        return instance;
    }

    /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
    public static SourceCodeInfo Deserialize(byte[] buffer)
    {
        var instance = new SourceCodeInfo();
        using (var ms = new MemoryStream(buffer))
            Deserialize(ms, instance);
        return instance;
    }

    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static global::Google.Protobuf.SourceCodeInfo Deserialize(byte[] buffer, global::Google.Protobuf.SourceCodeInfo instance)
    {
        using (var ms = new MemoryStream(buffer))
            Deserialize(ms, instance);
        return instance;
    }

    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static global::Google.Protobuf.SourceCodeInfo Deserialize(Stream stream, global::Google.Protobuf.SourceCodeInfo instance)
    {
        if (instance.LocationField == null)
            instance.LocationField = new List<global::Google.Protobuf.SourceCodeInfo.Location>();
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
                case 10:
                    // repeated
                    instance.LocationField.Add(global::Google.Protobuf.SourceCodeInfo.Location.DeserializeLengthDelimited(stream));
                    continue;
            }

            var key = ReadKey((byte)keyByte, stream);

            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.Field)
            {
                case 0:
                    throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                default:
                    SkipKey(stream, key);
                    break;
            }
        }

        return instance;
    }

    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static global::Google.Protobuf.SourceCodeInfo DeserializeLengthDelimited(Stream stream, global::Google.Protobuf.SourceCodeInfo instance)
    {
        if (instance.LocationField == null)
            instance.LocationField = new List<global::Google.Protobuf.SourceCodeInfo.Location>();
        long limit = ReadUInt32(stream);
        limit += stream.Position;
        while (true)
        {
            if (stream.Position >= limit)
            {
                if (stream.Position == limit)
                    break;
                else
                    throw new ProtocolBufferException("Read past max limit");
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                throw new System.IO.EndOfStreamException();
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
                case 10:
                    // repeated
                    instance.LocationField.Add(global::Google.Protobuf.SourceCodeInfo.Location.DeserializeLengthDelimited(stream));
                    continue;
            }

            var key = ReadKey((byte)keyByte, stream);

            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.Field)
            {
                case 0:
                    throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                default:
                    SkipKey(stream, key);
                    break;
            }
        }

        return instance;
    }

    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static global::Google.Protobuf.SourceCodeInfo DeserializeLength(Stream stream, int length, global::Google.Protobuf.SourceCodeInfo instance)
    {
        if (instance.LocationField == null)
            instance.LocationField = new List<global::Google.Protobuf.SourceCodeInfo.Location>();
        long limit = stream.Position + length;
        while (true)
        {
            if (stream.Position >= limit)
            {
                if (stream.Position == limit)
                    break;
                else
                    throw new ProtocolBufferException("Read past max limit");
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                throw new System.IO.EndOfStreamException();
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
                case 10:
                    // repeated
                    instance.LocationField.Add(global::Google.Protobuf.SourceCodeInfo.Location.DeserializeLengthDelimited(stream));
                    continue;
            }

            var key = ReadKey((byte)keyByte, stream);

            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.Field)
            {
                case 0:
                    throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                default:
                    SkipKey(stream, key);
                    break;
            }
        }

        return instance;
    }

    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(Stream stream, SourceCodeInfo instance)
    {
        using (var msField = new MemoryStream())
        {
            if (instance.LocationField != null)
            {
                foreach (var i1 in instance.LocationField)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿msField.SetLength(0);
                    global::Google.Protobuf.SourceCodeInfo.Location.Serialize(msField, i1);
                    // Length delimited byte array
                    uint length1 = (uint)msField.Length;
                    WriteUInt32(stream, length1);
                    msField.WriteTo(stream);

                }
            }
        }
    }

    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(SourceCodeInfo instance)
    {
        using (var ms = new MemoryStream())
        {
            Serialize(ms, instance);
            return ms.ToArray();
        }
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(Stream stream, SourceCodeInfo instance)
    {
        var data = SerializeToBytes(instance);
        WriteUInt32(stream, (uint)data.Length);
        stream.Write(data, 0, data.Length);
    }

    public partial class Location
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Location Deserialize(Stream stream)
        {
            var instance = new Location();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Location DeserializeLengthDelimited(Stream stream)
        {
            var instance = new Location();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Location DeserializeLength(Stream stream, int length)
        {
            var instance = new Location();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Location Deserialize(byte[] buffer)
        {
            var instance = new Location();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::Google.Protobuf.SourceCodeInfo.Location Deserialize(byte[] buffer, global::Google.Protobuf.SourceCodeInfo.Location instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::Google.Protobuf.SourceCodeInfo.Location Deserialize(Stream stream, global::Google.Protobuf.SourceCodeInfo.Location instance)
        {
            if (instance.Path == null)
                instance.Path = new List<int>();
            if (instance.Span == null)
                instance.Span = new List<int>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated packed
                        long end1 = ReadUInt32(stream);
                        end1 += stream.Position;
                        while (stream.Position < end1)
                        {
                            instance.Path.Add((int)ReadUInt64(stream));
                        }
                        if (stream.Position != end1)
                            throw new ProtocolBufferException("Read too many bytes in packed data");
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated packed
                        long end2 = ReadUInt32(stream);
                        end2 += stream.Position;
                        while (stream.Position < end2)
                        {
                            instance.Span.Add((int)ReadUInt64(stream));
                        }
                        if (stream.Position != end2)
                            throw new ProtocolBufferException("Read too many bytes in packed data");
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.LeadingComments = ReadString(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.TrailingComments = ReadString(stream);
                        continue;
                }

                var key = ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::Google.Protobuf.SourceCodeInfo.Location DeserializeLengthDelimited(Stream stream, global::Google.Protobuf.SourceCodeInfo.Location instance)
        {
            if (instance.Path == null)
                instance.Path = new List<int>();
            if (instance.Span == null)
                instance.Span = new List<int>();
            long limit = ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated packed
                        long end1 = ReadUInt32(stream);
                        end1 += stream.Position;
                        while (stream.Position < end1)
                        {
                            instance.Path.Add((int)ReadUInt64(stream));
                        }
                        if (stream.Position != end1)
                            throw new ProtocolBufferException("Read too many bytes in packed data");
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated packed
                        long end2 = ReadUInt32(stream);
                        end2 += stream.Position;
                        while (stream.Position < end2)
                        {
                            instance.Span.Add((int)ReadUInt64(stream));
                        }
                        if (stream.Position != end2)
                            throw new ProtocolBufferException("Read too many bytes in packed data");
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.LeadingComments = ReadString(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.TrailingComments = ReadString(stream);
                        continue;
                }

                var key = ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::Google.Protobuf.SourceCodeInfo.Location DeserializeLength(Stream stream, int length, global::Google.Protobuf.SourceCodeInfo.Location instance)
        {
            if (instance.Path == null)
                instance.Path = new List<int>();
            if (instance.Span == null)
                instance.Span = new List<int>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated packed
                        long end1 = ReadUInt32(stream);
                        end1 += stream.Position;
                        while (stream.Position < end1)
                        {
                            instance.Path.Add((int)ReadUInt64(stream));
                        }
                        if (stream.Position != end1)
                            throw new ProtocolBufferException("Read too many bytes in packed data");
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated packed
                        long end2 = ReadUInt32(stream);
                        end2 += stream.Position;
                        while (stream.Position < end2)
                        {
                            instance.Span.Add((int)ReadUInt64(stream));
                        }
                        if (stream.Position != end2)
                            throw new ProtocolBufferException("Read too many bytes in packed data");
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.LeadingComments = ReadString(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.TrailingComments = ReadString(stream);
                        continue;
                }

                var key = ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Location instance)
        {
            using (var msField = new MemoryStream())
            {
                if (instance.Path != null)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    msField.SetLength(0);
                    foreach (var i1 in instance.Path)
                    {
                        WriteUInt64(msField,(ulong)i1);
                    }
                    // Length delimited byte array
                    uint length1 = (uint)msField.Length;
                    WriteUInt32(stream, length1);
                    msField.WriteTo(stream);
                }
                if (instance.Span != null)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    msField.SetLength(0);
                    foreach (var i2 in instance.Span)
                    {
                        WriteUInt64(msField,(ulong)i2);
                    }
                    // Length delimited byte array
                    uint length2 = (uint)msField.Length;
                    WriteUInt32(stream, length2);
                    msField.WriteTo(stream);
                }
                if (instance.LeadingComments != null)
                {
                    // Key for field: 3, LengthDelimited
                    stream.WriteByte(26);
                    WriteBytes(stream, Encoding.UTF8.GetBytes(instance.LeadingComments));
                }
                if (instance.TrailingComments != null)
                {
                    // Key for field: 4, LengthDelimited
                    stream.WriteByte(34);
                    WriteBytes(stream, Encoding.UTF8.GetBytes(instance.TrailingComments));
                }
            }
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Location instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, Location instance)
        {
            var data = SerializeToBytes(instance);
            WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

}

