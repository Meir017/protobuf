﻿
// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
// To make custom modifications, edit the .proto file and add //:external before the message line
// then write the code and the changes in a separate file.

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;

using SilentOrbit.ProtocolBuffers;
using static SilentOrbit.ProtocolBuffers.ProtocolParser;

// This is the backend code for reading and writing
namespace Google.Protobuf;

public partial class UninterpretedOption
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static UninterpretedOption Deserialize(Stream stream)
    {
        var instance = new UninterpretedOption();
        Deserialize(stream, instance);
        return instance;
    }

    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static UninterpretedOption DeserializeLengthDelimited(Stream stream)
    {
        var instance = new UninterpretedOption();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }

    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static UninterpretedOption DeserializeLength(Stream stream, int length)
    {
        var instance = new UninterpretedOption();
        DeserializeLength(stream, length, instance);
        return instance;
    }

    /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
    public static UninterpretedOption Deserialize(byte[] buffer)
    {
        var instance = new UninterpretedOption();
        using (var ms = new MemoryStream(buffer))
            Deserialize(ms, instance);
        return instance;
    }

    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static global::Google.Protobuf.UninterpretedOption Deserialize(byte[] buffer, global::Google.Protobuf.UninterpretedOption instance)
    {
        using (var ms = new MemoryStream(buffer))
            Deserialize(ms, instance);
        return instance;
    }

    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static global::Google.Protobuf.UninterpretedOption Deserialize(Stream stream, global::Google.Protobuf.UninterpretedOption instance)
    {
        var br = new BinaryReader(stream);
        if (instance.Name == null)
            instance.Name = new List<global::Google.Protobuf.UninterpretedOption.NamePart>();
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 LengthDelimited
                case 18:
                    // repeated
                    instance.Name.Add(global::Google.Protobuf.UninterpretedOption.NamePart.DeserializeLengthDelimited(stream));
                    continue;
                // Field 3 LengthDelimited
                case 26:
                    instance.IdentifierValue = ReadString(stream);
                    continue;
                // Field 4 Varint
                case 32:
                    instance.PositiveIntValue = ReadUInt64(stream);
                    continue;
                // Field 5 Varint
                case 40:
                    instance.NegativeIntValue = (long)ReadUInt64(stream);
                    continue;
                // Field 6 Fixed64
                case 49:
                    instance.DoubleValue = br.ReadDouble();
                    continue;
                // Field 7 LengthDelimited
                case 58:
                    instance.StringValue = ReadBytes(stream);
                    continue;
                // Field 8 LengthDelimited
                case 66:
                    instance.AggregateValue = ReadString(stream);
                    continue;
            }

            var key = ReadKey((byte)keyByte, stream);

            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.Field)
            {
                case 0:
                    throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                default:
                    SkipKey(stream, key);
                    break;
            }
        }

        return instance;
    }

    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static global::Google.Protobuf.UninterpretedOption DeserializeLengthDelimited(Stream stream, global::Google.Protobuf.UninterpretedOption instance)
    {
        var br = new BinaryReader(stream);
        if (instance.Name == null)
            instance.Name = new List<global::Google.Protobuf.UninterpretedOption.NamePart>();
        long limit = ReadUInt32(stream);
        limit += stream.Position;
        while (true)
        {
            if (stream.Position >= limit)
            {
                if (stream.Position == limit)
                    break;
                else
                    throw new ProtocolBufferException("Read past max limit");
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                throw new System.IO.EndOfStreamException();
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 LengthDelimited
                case 18:
                    // repeated
                    instance.Name.Add(global::Google.Protobuf.UninterpretedOption.NamePart.DeserializeLengthDelimited(stream));
                    continue;
                // Field 3 LengthDelimited
                case 26:
                    instance.IdentifierValue = ReadString(stream);
                    continue;
                // Field 4 Varint
                case 32:
                    instance.PositiveIntValue = ReadUInt64(stream);
                    continue;
                // Field 5 Varint
                case 40:
                    instance.NegativeIntValue = (long)ReadUInt64(stream);
                    continue;
                // Field 6 Fixed64
                case 49:
                    instance.DoubleValue = br.ReadDouble();
                    continue;
                // Field 7 LengthDelimited
                case 58:
                    instance.StringValue = ReadBytes(stream);
                    continue;
                // Field 8 LengthDelimited
                case 66:
                    instance.AggregateValue = ReadString(stream);
                    continue;
            }

            var key = ReadKey((byte)keyByte, stream);

            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.Field)
            {
                case 0:
                    throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                default:
                    SkipKey(stream, key);
                    break;
            }
        }

        return instance;
    }

    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static global::Google.Protobuf.UninterpretedOption DeserializeLength(Stream stream, int length, global::Google.Protobuf.UninterpretedOption instance)
    {
        var br = new BinaryReader(stream);
        if (instance.Name == null)
            instance.Name = new List<global::Google.Protobuf.UninterpretedOption.NamePart>();
        long limit = stream.Position + length;
        while (true)
        {
            if (stream.Position >= limit)
            {
                if (stream.Position == limit)
                    break;
                else
                    throw new ProtocolBufferException("Read past max limit");
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                throw new System.IO.EndOfStreamException();
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 LengthDelimited
                case 18:
                    // repeated
                    instance.Name.Add(global::Google.Protobuf.UninterpretedOption.NamePart.DeserializeLengthDelimited(stream));
                    continue;
                // Field 3 LengthDelimited
                case 26:
                    instance.IdentifierValue = ReadString(stream);
                    continue;
                // Field 4 Varint
                case 32:
                    instance.PositiveIntValue = ReadUInt64(stream);
                    continue;
                // Field 5 Varint
                case 40:
                    instance.NegativeIntValue = (long)ReadUInt64(stream);
                    continue;
                // Field 6 Fixed64
                case 49:
                    instance.DoubleValue = br.ReadDouble();
                    continue;
                // Field 7 LengthDelimited
                case 58:
                    instance.StringValue = ReadBytes(stream);
                    continue;
                // Field 8 LengthDelimited
                case 66:
                    instance.AggregateValue = ReadString(stream);
                    continue;
            }

            var key = ReadKey((byte)keyByte, stream);

            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.Field)
            {
                case 0:
                    throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                default:
                    SkipKey(stream, key);
                    break;
            }
        }

        return instance;
    }

    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(Stream stream, UninterpretedOption instance)
    {
        var bw = new BinaryWriter(stream);
        using (var msField = new MemoryStream())
        {
            if (instance.Name != null)
            {
                foreach (var i2 in instance.Name)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    ﻿msField.SetLength(0);
                    global::Google.Protobuf.UninterpretedOption.NamePart.Serialize(msField, i2);
                    // Length delimited byte array
                    uint length2 = (uint)msField.Length;
                    WriteUInt32(stream, length2);
                    msField.WriteTo(stream);

                }
            }
            if (instance.IdentifierValue != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                WriteBytes(stream, Encoding.UTF8.GetBytes(instance.IdentifierValue));
            }
            // Key for field: 4, Varint
            stream.WriteByte(32);
            WriteUInt64(stream, instance.PositiveIntValue);
            // Key for field: 5, Varint
            stream.WriteByte(40);
            WriteUInt64(stream,(ulong)instance.NegativeIntValue);
            // Key for field: 6, Fixed64
            stream.WriteByte(49);
            bw.Write(instance.DoubleValue);
            if (instance.StringValue != null)
            {
                // Key for field: 7, LengthDelimited
                stream.WriteByte(58);
                WriteBytes(stream, instance.StringValue);
            }
            if (instance.AggregateValue != null)
            {
                // Key for field: 8, LengthDelimited
                stream.WriteByte(66);
                WriteBytes(stream, Encoding.UTF8.GetBytes(instance.AggregateValue));
            }
        }
    }

    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(UninterpretedOption instance)
    {
        using (var ms = new MemoryStream())
        {
            Serialize(ms, instance);
            return ms.ToArray();
        }
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(Stream stream, UninterpretedOption instance)
    {
        var data = SerializeToBytes(instance);
        WriteUInt32(stream, (uint)data.Length);
        stream.Write(data, 0, data.Length);
    }

    public partial class NamePart
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static NamePart Deserialize(Stream stream)
        {
            var instance = new NamePart();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static NamePart DeserializeLengthDelimited(Stream stream)
        {
            var instance = new NamePart();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static NamePart DeserializeLength(Stream stream, int length)
        {
            var instance = new NamePart();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static NamePart Deserialize(byte[] buffer)
        {
            var instance = new NamePart();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::Google.Protobuf.UninterpretedOption.NamePart Deserialize(byte[] buffer, global::Google.Protobuf.UninterpretedOption.NamePart instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::Google.Protobuf.UninterpretedOption.NamePart Deserialize(Stream stream, global::Google.Protobuf.UninterpretedOption.NamePart instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.NamePartField = ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.IsExtension = ReadBool(stream);
                        continue;
                }

                var key = ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::Google.Protobuf.UninterpretedOption.NamePart DeserializeLengthDelimited(Stream stream, global::Google.Protobuf.UninterpretedOption.NamePart instance)
        {
            long limit = ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.NamePartField = ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.IsExtension = ReadBool(stream);
                        continue;
                }

                var key = ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::Google.Protobuf.UninterpretedOption.NamePart DeserializeLength(Stream stream, int length, global::Google.Protobuf.UninterpretedOption.NamePart instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.NamePartField = ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.IsExtension = ReadBool(stream);
                        continue;
                }

                var key = ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, NamePart instance)
        {
            using (var msField = new MemoryStream())
            {
                if (instance.NamePartField == null)
                    throw new ProtocolBufferException("NamePartField is required by the proto specification.");
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                WriteBytes(stream, Encoding.UTF8.GetBytes(instance.NamePartField));
                // Key for field: 2, Varint
                stream.WriteByte(16);
                WriteBool(stream, instance.IsExtension);
            }
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(NamePart instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, NamePart instance)
        {
            var data = SerializeToBytes(instance);
            WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

}

