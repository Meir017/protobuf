﻿
// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
// To make custom modifications, edit the .proto file and add //:external before the message line
// then write the code and the changes in a separate file.

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;

using SilentOrbit.ProtocolBuffers;
using static SilentOrbit.ProtocolBuffers.ProtocolParser;

// This is the backend code for reading and writing
namespace Yours;

public partial class MyMessageV2
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static MyMessageV2 Deserialize(Stream stream)
    {
        var instance = new MyMessageV2();
        Deserialize(stream, instance);
        return instance;
    }

    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static MyMessageV2 DeserializeLengthDelimited(Stream stream)
    {
        var instance = new MyMessageV2();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }

    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static MyMessageV2 DeserializeLength(Stream stream, int length)
    {
        var instance = new MyMessageV2();
        DeserializeLength(stream, length, instance);
        return instance;
    }

    /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
    public static MyMessageV2 Deserialize(byte[] buffer)
    {
        var instance = new MyMessageV2();
        using (var ms = new MemoryStream(buffer))
            Deserialize(ms, instance);
        return instance;
    }

    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static global::Yours.MyMessageV2 Deserialize(byte[] buffer, global::Yours.MyMessageV2 instance)
    {
        using (var ms = new MemoryStream(buffer))
            Deserialize(ms, instance);
        return instance;
    }

    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static global::Yours.MyMessageV2 Deserialize(Stream stream, global::Yours.MyMessageV2 instance)
    {
        var br = new BinaryReader(stream);
        instance.FieldA = -1;
        instance.FieldB = 4.5;
        instance.FieldC = 5.4f;
        instance.FieldD = -2;
        instance.FieldE = -3;
        instance.FieldF = 4;
        instance.FieldG = 5;
        instance.FieldH = -6;
        instance.FieldI = -7;
        instance.FieldJ = 8;
        instance.FieldK = 9;
        instance.FieldL = -10;
        instance.FieldM = -11;
        instance.FieldN = false;
        instance.FieldO = "test";
#pragma warning disable 612
#pragma warning restore 612
        instance.FieldR = global::Yours.MyMessageV2.MyEnum.ETest2;
#pragma warning disable 612
#pragma warning restore 612
        if (instance.FieldT == null)
            instance.FieldT = new List<uint>();
        if (instance.FieldS == null)
            instance.FieldS = new List<uint>();
        if (instance.FieldV == null)
            instance.FieldV = new List<global::Theirs.TheirMessage>();
        instance.NullableEnum = global::Yours.MyMessageV2.AliasedEnum.Nothing;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
                case 8:
                    instance.FieldA = (int)ReadUInt64(stream);
                    continue;
                // Field 2 Fixed64
                case 17:
                    instance.FieldB = br.ReadDouble();
                    continue;
                // Field 3 Fixed32
                case 29:
                    instance.FieldC = br.ReadSingle();
                    continue;
                // Field 4 Varint
                case 32:
                    instance.FieldD = (int)ReadUInt64(stream);
                    continue;
                // Field 5 Varint
                case 40:
                    instance.FieldE = (long)ReadUInt64(stream);
                    continue;
                // Field 6 Varint
                case 48:
                    instance.FieldF = ReadUInt32(stream);
                    continue;
                // Field 7 Varint
                case 56:
                    instance.FieldG = ReadUInt64(stream);
                    continue;
                // Field 8 Varint
                case 64:
                    instance.FieldH = ReadZInt32(stream);
                    continue;
                // Field 9 Varint
                case 72:
                    instance.FieldI = ReadZInt64(stream);
                    continue;
                // Field 10 Fixed32
                case 85:
                    instance.FieldJ = br.ReadUInt32();
                    continue;
                // Field 11 Fixed64
                case 89:
                    instance.FieldK = br.ReadUInt64();
                    continue;
                // Field 12 Fixed32
                case 101:
                    instance.FieldL = br.ReadInt32();
                    continue;
                // Field 13 Fixed64
                case 105:
                    instance.FieldM = br.ReadInt64();
                    continue;
                // Field 14 Varint
                case 112:
                    instance.FieldN = ReadBool(stream);
                    continue;
                // Field 15 LengthDelimited
                case 122:
                    instance.FieldO = ReadString(stream);
                    continue;
            }

            var key = ReadKey((byte)keyByte, stream);

            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.Field)
            {
                case 0:
                    throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                case 16:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
#pragma warning disable 612
                    instance.FieldP = ReadBytes(stream);
                    continue;
#pragma warning restore 612
                case 17:
                    if(key.WireType != Wire.Varint)
                        break;
                    instance.FieldQ = (global::Yours.MyMessageV2.MyEnum)ReadUInt64(stream);
                    continue;
                case 18:
                    if(key.WireType != Wire.Varint)
                        break;
                    instance.FieldR = (global::Yours.MyMessageV2.MyEnum)ReadUInt64(stream);
                    continue;
                case 19:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
#pragma warning disable 612
                    instance.Dummy = ReadString(stream);
                    continue;
#pragma warning restore 612
                case 20:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
                    // repeated packed
                    long end20 = ReadUInt32(stream);
                    end20 += stream.Position;
                    while (stream.Position < end20)
                    {
                        instance.FieldT.Add(br.ReadUInt32());
                    }
                    if (stream.Position != end20)
                        throw new ProtocolBufferException("Read too many bytes in packed data");
                    continue;
                case 21:
                    if(key.WireType != Wire.Varint)
                        break;
                    // repeated
                    instance.FieldS.Add(ReadUInt32(stream));
                    continue;
                case 22:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
                    if (instance.FieldU == null)
                        instance.FieldU = global::Theirs.TheirMessage.DeserializeLengthDelimited(stream);
                    else
                        global::Theirs.TheirMessage.DeserializeLengthDelimited(stream, instance.FieldU);
                    continue;
                case 23:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
                    // repeated
                    instance.FieldV.Add(global::Theirs.TheirMessage.DeserializeLengthDelimited(stream));
                    continue;
                case 24:
                    if(key.WireType != Wire.Varint)
                        break;
                    instance.NullableInt = (int)ReadUInt64(stream);
                    continue;
                case 25:
                    if(key.WireType != Wire.Varint)
                        break;
                    instance.NullableEnum = (global::Yours.MyMessageV2.AliasedEnum)ReadUInt64(stream);
                    continue;
                default:
                    SkipKey(stream, key);
                    break;
            }
        }

        return instance;
    }

    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static global::Yours.MyMessageV2 DeserializeLengthDelimited(Stream stream, global::Yours.MyMessageV2 instance)
    {
        var br = new BinaryReader(stream);
        instance.FieldA = -1;
        instance.FieldB = 4.5;
        instance.FieldC = 5.4f;
        instance.FieldD = -2;
        instance.FieldE = -3;
        instance.FieldF = 4;
        instance.FieldG = 5;
        instance.FieldH = -6;
        instance.FieldI = -7;
        instance.FieldJ = 8;
        instance.FieldK = 9;
        instance.FieldL = -10;
        instance.FieldM = -11;
        instance.FieldN = false;
        instance.FieldO = "test";
#pragma warning disable 612
#pragma warning restore 612
        instance.FieldR = global::Yours.MyMessageV2.MyEnum.ETest2;
#pragma warning disable 612
#pragma warning restore 612
        if (instance.FieldT == null)
            instance.FieldT = new List<uint>();
        if (instance.FieldS == null)
            instance.FieldS = new List<uint>();
        if (instance.FieldV == null)
            instance.FieldV = new List<global::Theirs.TheirMessage>();
        instance.NullableEnum = global::Yours.MyMessageV2.AliasedEnum.Nothing;
        long limit = ReadUInt32(stream);
        limit += stream.Position;
        while (true)
        {
            if (stream.Position >= limit)
            {
                if (stream.Position == limit)
                    break;
                else
                    throw new ProtocolBufferException("Read past max limit");
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                throw new System.IO.EndOfStreamException();
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
                case 8:
                    instance.FieldA = (int)ReadUInt64(stream);
                    continue;
                // Field 2 Fixed64
                case 17:
                    instance.FieldB = br.ReadDouble();
                    continue;
                // Field 3 Fixed32
                case 29:
                    instance.FieldC = br.ReadSingle();
                    continue;
                // Field 4 Varint
                case 32:
                    instance.FieldD = (int)ReadUInt64(stream);
                    continue;
                // Field 5 Varint
                case 40:
                    instance.FieldE = (long)ReadUInt64(stream);
                    continue;
                // Field 6 Varint
                case 48:
                    instance.FieldF = ReadUInt32(stream);
                    continue;
                // Field 7 Varint
                case 56:
                    instance.FieldG = ReadUInt64(stream);
                    continue;
                // Field 8 Varint
                case 64:
                    instance.FieldH = ReadZInt32(stream);
                    continue;
                // Field 9 Varint
                case 72:
                    instance.FieldI = ReadZInt64(stream);
                    continue;
                // Field 10 Fixed32
                case 85:
                    instance.FieldJ = br.ReadUInt32();
                    continue;
                // Field 11 Fixed64
                case 89:
                    instance.FieldK = br.ReadUInt64();
                    continue;
                // Field 12 Fixed32
                case 101:
                    instance.FieldL = br.ReadInt32();
                    continue;
                // Field 13 Fixed64
                case 105:
                    instance.FieldM = br.ReadInt64();
                    continue;
                // Field 14 Varint
                case 112:
                    instance.FieldN = ReadBool(stream);
                    continue;
                // Field 15 LengthDelimited
                case 122:
                    instance.FieldO = ReadString(stream);
                    continue;
            }

            var key = ReadKey((byte)keyByte, stream);

            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.Field)
            {
                case 0:
                    throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                case 16:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
#pragma warning disable 612
                    instance.FieldP = ReadBytes(stream);
                    continue;
#pragma warning restore 612
                case 17:
                    if(key.WireType != Wire.Varint)
                        break;
                    instance.FieldQ = (global::Yours.MyMessageV2.MyEnum)ReadUInt64(stream);
                    continue;
                case 18:
                    if(key.WireType != Wire.Varint)
                        break;
                    instance.FieldR = (global::Yours.MyMessageV2.MyEnum)ReadUInt64(stream);
                    continue;
                case 19:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
#pragma warning disable 612
                    instance.Dummy = ReadString(stream);
                    continue;
#pragma warning restore 612
                case 20:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
                    // repeated packed
                    long end20 = ReadUInt32(stream);
                    end20 += stream.Position;
                    while (stream.Position < end20)
                    {
                        instance.FieldT.Add(br.ReadUInt32());
                    }
                    if (stream.Position != end20)
                        throw new ProtocolBufferException("Read too many bytes in packed data");
                    continue;
                case 21:
                    if(key.WireType != Wire.Varint)
                        break;
                    // repeated
                    instance.FieldS.Add(ReadUInt32(stream));
                    continue;
                case 22:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
                    if (instance.FieldU == null)
                        instance.FieldU = global::Theirs.TheirMessage.DeserializeLengthDelimited(stream);
                    else
                        global::Theirs.TheirMessage.DeserializeLengthDelimited(stream, instance.FieldU);
                    continue;
                case 23:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
                    // repeated
                    instance.FieldV.Add(global::Theirs.TheirMessage.DeserializeLengthDelimited(stream));
                    continue;
                case 24:
                    if(key.WireType != Wire.Varint)
                        break;
                    instance.NullableInt = (int)ReadUInt64(stream);
                    continue;
                case 25:
                    if(key.WireType != Wire.Varint)
                        break;
                    instance.NullableEnum = (global::Yours.MyMessageV2.AliasedEnum)ReadUInt64(stream);
                    continue;
                default:
                    SkipKey(stream, key);
                    break;
            }
        }

        return instance;
    }

    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static global::Yours.MyMessageV2 DeserializeLength(Stream stream, int length, global::Yours.MyMessageV2 instance)
    {
        var br = new BinaryReader(stream);
        instance.FieldA = -1;
        instance.FieldB = 4.5;
        instance.FieldC = 5.4f;
        instance.FieldD = -2;
        instance.FieldE = -3;
        instance.FieldF = 4;
        instance.FieldG = 5;
        instance.FieldH = -6;
        instance.FieldI = -7;
        instance.FieldJ = 8;
        instance.FieldK = 9;
        instance.FieldL = -10;
        instance.FieldM = -11;
        instance.FieldN = false;
        instance.FieldO = "test";
#pragma warning disable 612
#pragma warning restore 612
        instance.FieldR = global::Yours.MyMessageV2.MyEnum.ETest2;
#pragma warning disable 612
#pragma warning restore 612
        if (instance.FieldT == null)
            instance.FieldT = new List<uint>();
        if (instance.FieldS == null)
            instance.FieldS = new List<uint>();
        if (instance.FieldV == null)
            instance.FieldV = new List<global::Theirs.TheirMessage>();
        instance.NullableEnum = global::Yours.MyMessageV2.AliasedEnum.Nothing;
        long limit = stream.Position + length;
        while (true)
        {
            if (stream.Position >= limit)
            {
                if (stream.Position == limit)
                    break;
                else
                    throw new ProtocolBufferException("Read past max limit");
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                throw new System.IO.EndOfStreamException();
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
                case 8:
                    instance.FieldA = (int)ReadUInt64(stream);
                    continue;
                // Field 2 Fixed64
                case 17:
                    instance.FieldB = br.ReadDouble();
                    continue;
                // Field 3 Fixed32
                case 29:
                    instance.FieldC = br.ReadSingle();
                    continue;
                // Field 4 Varint
                case 32:
                    instance.FieldD = (int)ReadUInt64(stream);
                    continue;
                // Field 5 Varint
                case 40:
                    instance.FieldE = (long)ReadUInt64(stream);
                    continue;
                // Field 6 Varint
                case 48:
                    instance.FieldF = ReadUInt32(stream);
                    continue;
                // Field 7 Varint
                case 56:
                    instance.FieldG = ReadUInt64(stream);
                    continue;
                // Field 8 Varint
                case 64:
                    instance.FieldH = ReadZInt32(stream);
                    continue;
                // Field 9 Varint
                case 72:
                    instance.FieldI = ReadZInt64(stream);
                    continue;
                // Field 10 Fixed32
                case 85:
                    instance.FieldJ = br.ReadUInt32();
                    continue;
                // Field 11 Fixed64
                case 89:
                    instance.FieldK = br.ReadUInt64();
                    continue;
                // Field 12 Fixed32
                case 101:
                    instance.FieldL = br.ReadInt32();
                    continue;
                // Field 13 Fixed64
                case 105:
                    instance.FieldM = br.ReadInt64();
                    continue;
                // Field 14 Varint
                case 112:
                    instance.FieldN = ReadBool(stream);
                    continue;
                // Field 15 LengthDelimited
                case 122:
                    instance.FieldO = ReadString(stream);
                    continue;
            }

            var key = ReadKey((byte)keyByte, stream);

            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.Field)
            {
                case 0:
                    throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                case 16:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
#pragma warning disable 612
                    instance.FieldP = ReadBytes(stream);
                    continue;
#pragma warning restore 612
                case 17:
                    if(key.WireType != Wire.Varint)
                        break;
                    instance.FieldQ = (global::Yours.MyMessageV2.MyEnum)ReadUInt64(stream);
                    continue;
                case 18:
                    if(key.WireType != Wire.Varint)
                        break;
                    instance.FieldR = (global::Yours.MyMessageV2.MyEnum)ReadUInt64(stream);
                    continue;
                case 19:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
#pragma warning disable 612
                    instance.Dummy = ReadString(stream);
                    continue;
#pragma warning restore 612
                case 20:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
                    // repeated packed
                    long end20 = ReadUInt32(stream);
                    end20 += stream.Position;
                    while (stream.Position < end20)
                    {
                        instance.FieldT.Add(br.ReadUInt32());
                    }
                    if (stream.Position != end20)
                        throw new ProtocolBufferException("Read too many bytes in packed data");
                    continue;
                case 21:
                    if(key.WireType != Wire.Varint)
                        break;
                    // repeated
                    instance.FieldS.Add(ReadUInt32(stream));
                    continue;
                case 22:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
                    if (instance.FieldU == null)
                        instance.FieldU = global::Theirs.TheirMessage.DeserializeLengthDelimited(stream);
                    else
                        global::Theirs.TheirMessage.DeserializeLengthDelimited(stream, instance.FieldU);
                    continue;
                case 23:
                    if(key.WireType != Wire.LengthDelimited)
                        break;
                    // repeated
                    instance.FieldV.Add(global::Theirs.TheirMessage.DeserializeLengthDelimited(stream));
                    continue;
                case 24:
                    if(key.WireType != Wire.Varint)
                        break;
                    instance.NullableInt = (int)ReadUInt64(stream);
                    continue;
                case 25:
                    if(key.WireType != Wire.Varint)
                        break;
                    instance.NullableEnum = (global::Yours.MyMessageV2.AliasedEnum)ReadUInt64(stream);
                    continue;
                default:
                    SkipKey(stream, key);
                    break;
            }
        }

        return instance;
    }

    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(Stream stream, MyMessageV2 instance)
    {
        var bw = new BinaryWriter(stream);
        using (var msField = new MemoryStream())
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            WriteUInt64(stream,(ulong)instance.FieldA);
            // Key for field: 2, Fixed64
            stream.WriteByte(17);
            bw.Write(instance.FieldB);
            // Key for field: 3, Fixed32
            stream.WriteByte(29);
            bw.Write(instance.FieldC);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            WriteUInt64(stream,(ulong)instance.FieldD);
            // Key for field: 5, Varint
            stream.WriteByte(40);
            WriteUInt64(stream,(ulong)instance.FieldE);
            // Key for field: 6, Varint
            stream.WriteByte(48);
            WriteUInt32(stream, instance.FieldF);
            // Key for field: 7, Varint
            stream.WriteByte(56);
            WriteUInt64(stream, instance.FieldG);
            // Key for field: 8, Varint
            stream.WriteByte(64);
            WriteZInt32(stream, instance.FieldH);
            // Key for field: 9, Varint
            stream.WriteByte(72);
            WriteZInt64(stream, instance.FieldI);
            // Key for field: 10, Fixed32
            stream.WriteByte(85);
            bw.Write(instance.FieldJ);
            // Key for field: 11, Fixed64
            stream.WriteByte(89);
            bw.Write(instance.FieldK);
            // Key for field: 12, Fixed32
            stream.WriteByte(101);
            bw.Write(instance.FieldL);
            // Key for field: 13, Fixed64
            stream.WriteByte(105);
            bw.Write(instance.FieldM);
            // Key for field: 14, Varint
            stream.WriteByte(112);
            WriteBool(stream, instance.FieldN);
            if (instance.FieldO == null)
                throw new ProtocolBufferException("FieldO is required by the proto specification.");
            // Key for field: 15, LengthDelimited
            stream.WriteByte(122);
            WriteBytes(stream, Encoding.UTF8.GetBytes(instance.FieldO));
#pragma warning disable 612
            if (instance.FieldP == null)
                throw new ProtocolBufferException("FieldP is required by the proto specification.");
            // Key for field: 16, LengthDelimited
            stream.WriteByte(130);
            stream.WriteByte(1);
            WriteBytes(stream, instance.FieldP);
#pragma warning restore 612
            // Key for field: 17, Varint
            stream.WriteByte(136);
            stream.WriteByte(1);
            WriteUInt64(stream,(ulong)instance.FieldQ);
            if (instance.FieldR != global::Yours.MyMessageV2.MyEnum.ETest2)
            {
                // Key for field: 18, Varint
                stream.WriteByte(144);
                stream.WriteByte(1);
                WriteUInt64(stream,(ulong)instance.FieldR);
            }
#pragma warning disable 612
            if (instance.Dummy != null)
            {
                // Key for field: 19, LengthDelimited
                stream.WriteByte(154);
                stream.WriteByte(1);
                WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Dummy));
            }
#pragma warning restore 612
            if (instance.FieldT != null)
            {
                // Key for field: 20, LengthDelimited
                stream.WriteByte(162);
                stream.WriteByte(1);
                WriteUInt32(stream, 4u * (uint)instance.FieldT.Count);
                foreach (var i20 in instance.FieldT)
                {
                    bw.Write(i20);
                }
            }
            if (instance.FieldS != null)
            {
                foreach (var i21 in instance.FieldS)
                {
                    // Key for field: 21, Varint
                    stream.WriteByte(168);
                    stream.WriteByte(1);
                    WriteUInt32(stream, i21);
                }
            }
            if (instance.FieldU != null)
            {
                // Key for field: 22, LengthDelimited
                stream.WriteByte(178);
                stream.WriteByte(1);
                ﻿msField.SetLength(0);
                global::Theirs.TheirMessage.Serialize(msField, instance.FieldU);
                // Length delimited byte array
                uint length22 = (uint)msField.Length;
                WriteUInt32(stream, length22);
                msField.WriteTo(stream);

            }
            if (instance.FieldV != null)
            {
                foreach (var i23 in instance.FieldV)
                {
                    // Key for field: 23, LengthDelimited
                    stream.WriteByte(186);
                    stream.WriteByte(1);
                    ﻿msField.SetLength(0);
                    global::Theirs.TheirMessage.Serialize(msField, i23);
                    // Length delimited byte array
                    uint length23 = (uint)msField.Length;
                    WriteUInt32(stream, length23);
                    msField.WriteTo(stream);

                }
            }
            // Key for field: 24, Varint
            stream.WriteByte(192);
            stream.WriteByte(1);
            WriteUInt64(stream,(ulong)instance.NullableInt);
            // Key for field: 25, Varint
            stream.WriteByte(200);
            stream.WriteByte(1);
            WriteUInt64(stream,(ulong)instance.NullableEnum);
        }
    }

    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(MyMessageV2 instance)
    {
        using (var ms = new MemoryStream())
        {
            Serialize(ms, instance);
            return ms.ToArray();
        }
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(Stream stream, MyMessageV2 instance)
    {
        var data = SerializeToBytes(instance);
        WriteUInt32(stream, (uint)data.Length);
        stream.Write(data, 0, data.Length);
    }
}

