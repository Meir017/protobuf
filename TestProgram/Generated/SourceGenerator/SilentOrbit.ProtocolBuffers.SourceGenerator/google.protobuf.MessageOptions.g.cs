﻿
// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
// To make custom modifications, edit the .proto file and add //:external before the message line
// then write the code and the changes in a separate file.

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;

using SilentOrbit.ProtocolBuffers;
using static SilentOrbit.ProtocolBuffers.ProtocolParser;

// Classes and structures being serialized
namespace Google.Protobuf;

public partial class MessageOptions
{
    public MessageOptions()
    {
        MessageSetWireFormat = false;
        NoStandardDescriptorAccessor = false;
    }
    /// <summary>
    /// <para> Set true to use the old proto1 MessageSet wire format for extensions.</para>
    /// <para> This is provided for backwards-compatibility with the MessageSet wire</para>
    /// <para> format.  You should not use this for any other reason:  It's less</para>
    /// <para> efficient, has fewer features, and is more complicated.</para>
    /// <para></para>
    /// <para> The message must be defined exactly as follows:</para>
    /// <para>   message Foo {</para>
    /// <para>     option message_set_wire_format = true;</para>
    /// <para>     extensions 4 to max;</para>
    /// <para>   }</para>
    /// <para> Note that the message cannot have any defined fields; MessageSets only</para>
    /// <para> have extensions.</para>
    /// <para></para>
    /// <para> All extensions of your type must be singular messages; e.g. they cannot</para>
    /// <para> be int32s, enums, or repeated messages.</para>
    /// <para></para>
    /// <para> Because this is an option, the above two restrictions are not enforced by</para>
    /// <para> the protocol compiler.</para>
    /// </summary>
    public bool MessageSetWireFormat { get; set; }

    /// <summary>
    /// <para> Disables the generation of the standard "descriptor()" accessor, which can</para>
    /// <para> conflict with a field of the same name.  This is meant to make migration</para>
    /// <para> from proto1 easier; new code should avoid fields named "descriptor".</para>
    /// </summary>
    public bool NoStandardDescriptorAccessor { get; set; }

    /// <summary> The parser stores options it doesn't recognize here. See above.</summary>
    public List<UninterpretedOption> UninterpretedOption { get; set; }

}

