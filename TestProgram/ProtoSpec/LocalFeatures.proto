
package local_feature_test;

import "ProtoFeatures.proto";

//:flags
enum top_enum
{
    First = 1;
    Last = 1000000;
}

//:external
enum external_enum
{
    First = 1;
    Last = 1000000;
}

//This is a demonstration of features only present in ProtoBuf Code Generator
//:access = internal   //public or internal
//:namespace = Local // Default from .proto: local_feature_test
//:triggers
message local_features
{
    //Make class field of type TimeSpan, serialized to Ticks
    //:codetype = TimeSpan
    required int64 Uptime = 1;
    
    //Make class field of type DateTime, serialized to Ticks
    //:codetype = DateTimeUTC
    required int64 DueDate = 2;
    
    //Make class field of type DateTime, serialized to Ticks
    //:codetype = DateTimeLocal
    required int64 DueDateLocal = 3;
    
    //Do not generate class field, must be implemented in other partial class
    //:external
    required double Amount = 4;
    
    //Custom field access types. Default: public
    //:access = private //public, internal, protected or private
    optional string Denial = 5;
    //:access = protected   //public, internal, protected or private
    optional string Secret = 6;
    //:access = internal    //public, internal, protected or private
    optional string Internal = 7;
    
    optional string PR = 8;
    
    //Generate a c# readonly field
    //:readonly
    optional proto.test.my_message_v1 testing_read_only = 9;
    
    //When deserializing this one must be set to a class before
    required interface_test MyInterface = 10;
    optional struct_test MyStruct = 11;
    optional external_struct MyExtStruct = 12;
    optional external_class MyExtClass = 13;
    
    optional top_enum MyEnum = 14;
}

//Testing local struct serialization
//:type = interface //class, struct or interface
message interface_test
{
}

//Testing local struct serialization
//:type = struct    //class, struct or interface
message struct_test
{
}

//Testing external struct serialization
//:namespace = TestB // Default from .proto: local_feature_test
//:type = struct   //class, struct or interface
//:external
message external_struct
{
    required double X = 1;
}

//External sealed class test, we have no posibility to modify this one
//:namespace = TestB // Default from .proto: local_feature_test
//:external
message external_class
{
    required int32 A = 1;
}
